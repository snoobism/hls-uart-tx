// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top_top,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a15t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.606000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=129,HLS_SYN_LUT=192,HLS_VERSION=2021_1}" *)

module top (
        ap_clk,
        ap_rst,
        data,
        load,
        write_r,
        full,
        empty,
        tx
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input  [7:0] data;
input  [0:0] load;
input  [0:0] write_r;
output  [0:0] full;
output  [0:0] empty;
output  [0:0] tx;

reg   [0:0] load_d;
reg   [0:0] write_d;
reg   [1:0] state;
reg   [9:0] shift_reg_V;
reg   [3:0] bits_shifted_V;
reg   [10:0] bit_counter_V;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] data_fifo_dout;
wire    data_fifo_empty_n;
reg    data_fifo_read;
wire   [1:0] state_load_load_fu_215_p1;
wire   [9:0] data_fifo_din;
wire    data_fifo_full_n;
reg    data_fifo_write;
wire   [0:0] or_ln93_1_fu_406_p2;
reg    ap_block_state1;
wire   [1:0] select_ln72_fu_320_p3;
wire   [0:0] icmp_ln1057_fu_302_p2;
wire   [0:0] or_ln59_1_fu_376_p2;
wire   [9:0] p_Result_s_fu_262_p5;
wire   [3:0] add_ln870_fu_280_p2;
wire   [10:0] add_ln870_1_fu_334_p2;
wire   [0:0] xor_ln140_fu_190_p2;
wire   [0:0] tmp_1_nbreadreq_fu_138_p3;
wire   [0:0] xor_ln136_fu_197_p2;
wire   [0:0] xor_ln140_fu_190_p0;
wire   [0:0] tmp_2_fu_227_p3;
wire   [0:0] trunc_ln708_fu_223_p1;
wire   [0:0] xor_ln53_fu_235_p2;
wire   [8:0] tmp_3_fu_252_p4;
wire   [0:0] icmp_ln70_fu_314_p2;
wire   [0:0] xor_ln59_fu_364_p2;
wire   [0:0] or_ln59_fu_370_p2;
wire   [0:0] xor_ln93_fu_394_p2;
wire   [0:0] or_ln93_fu_400_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_condition_178;
reg    ap_condition_53;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 load_d = 1'd0;
#0 write_d = 1'd0;
#0 state = 2'd0;
#0 shift_reg_V = 10'd1023;
#0 bits_shifted_V = 4'd0;
#0 bit_counter_V = 11'd0;
#0 ap_CS_fsm = 1'd1;
end

top_fifo_w10_d8_S data_fifo_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(data_fifo_din),
    .if_full_n(data_fifo_full_n),
    .if_write(data_fifo_write),
    .if_dout(data_fifo_dout),
    .if_empty_n(data_fifo_empty_n),
    .if_read(data_fifo_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_178)) begin
        if ((icmp_ln1057_fu_302_p2 == 1'd1)) begin
            bit_counter_V <= add_ln870_1_fu_334_p2;
        end else if ((icmp_ln1057_fu_302_p2 == 1'd0)) begin
            bit_counter_V <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_53)) begin
        if ((state_load_load_fu_215_p1 == 2'd0)) begin
            bits_shifted_V <= 4'd0;
        end else if ((state_load_load_fu_215_p1 == 2'd3)) begin
            bits_shifted_V <= add_ln870_fu_280_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_53)) begin
        if ((state == 2'd1)) begin
            shift_reg_V <= data_fifo_dout;
        end else if ((state_load_load_fu_215_p1 == 2'd3)) begin
            shift_reg_V <= p_Result_s_fu_262_p5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (~(1'b1 == 1'b1)) begin
        state <= 2'd0;
    end else if ((~(((or_ln93_1_fu_406_p2 == 1'd0) & (data_fifo_full_n == 1'b0)) | ((state == 2'd1) & (data_fifo_empty_n == 1'b0))) & (or_ln59_1_fu_376_p2 == 1'd0) & (state_load_load_fu_215_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        state <= 2'd1;
    end else if ((~(((or_ln93_1_fu_406_p2 == 1'd0) & (data_fifo_full_n == 1'b0)) | ((state == 2'd1) & (data_fifo_empty_n == 1'b0))) & (icmp_ln1057_fu_302_p2 == 1'd0) & (state_load_load_fu_215_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state1))) begin
        state <= select_ln72_fu_320_p3;
    end else if (((~(((or_ln93_1_fu_406_p2 == 1'd0) & (data_fifo_full_n == 1'b0)) | ((state == 2'd1) & (data_fifo_empty_n == 1'b0))) & (state_load_load_fu_215_p1 == 2'd3) & (1'b1 == ap_CS_fsm_state1)) | (~(((or_ln93_1_fu_406_p2 == 1'd0) & (data_fifo_full_n == 1'b0)) | ((state == 2'd1) & (data_fifo_empty_n == 1'b0))) & (state == 2'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state <= 2'd2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((or_ln93_1_fu_406_p2 == 1'd0) & (data_fifo_full_n == 1'b0)) | ((state == 2'd1) & (data_fifo_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        load_d <= load;
        write_d <= write_r;
    end
end

always @ (*) begin
    if ((((or_ln93_1_fu_406_p2 == 1'd0) & (data_fifo_full_n == 1'b0)) | ((state == 2'd1) & (data_fifo_empty_n == 1'b0)))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~(((or_ln93_1_fu_406_p2 == 1'd0) & (data_fifo_full_n == 1'b0)) | ((state == 2'd1) & (data_fifo_empty_n == 1'b0))) & (state == 2'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        data_fifo_read = 1'b1;
    end else begin
        data_fifo_read = 1'b0;
    end
end

always @ (*) begin
    if ((~(((or_ln93_1_fu_406_p2 == 1'd0) & (data_fifo_full_n == 1'b0)) | ((state == 2'd1) & (data_fifo_empty_n == 1'b0))) & (or_ln93_1_fu_406_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        data_fifo_write = 1'b1;
    end else begin
        data_fifo_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln870_1_fu_334_p2 = (bit_counter_V + 11'd1);

assign add_ln870_fu_280_p2 = (bits_shifted_V + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = (((or_ln93_1_fu_406_p2 == 1'd0) & (data_fifo_full_n == 1'b0)) | ((state == 2'd1) & (data_fifo_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_178 = (~(((or_ln93_1_fu_406_p2 == 1'd0) & (data_fifo_full_n == 1'b0)) | ((state == 2'd1) & (data_fifo_empty_n == 1'b0))) & (state_load_load_fu_215_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state1));
end

always @ (*) begin
    ap_condition_53 = (~(((or_ln93_1_fu_406_p2 == 1'd0) & (data_fifo_full_n == 1'b0)) | ((state == 2'd1) & (data_fifo_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state1));
end

assign data_fifo_din = {{{{1'd1}, {data}}}, {1'd0}};

assign empty = xor_ln136_fu_197_p2;

assign full = xor_ln140_fu_190_p2;

assign icmp_ln1057_fu_302_p2 = ((bit_counter_V < 11'd1248) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_314_p2 = ((bits_shifted_V != 4'd10) ? 1'b1 : 1'b0);

assign or_ln59_1_fu_376_p2 = (write_d | or_ln59_fu_370_p2);

assign or_ln59_fu_370_p2 = (xor_ln59_fu_364_p2 | xor_ln136_fu_197_p2);

assign or_ln93_1_fu_406_p2 = (or_ln93_fu_400_p2 | load_d);

assign or_ln93_fu_400_p2 = (xor_ln93_fu_394_p2 | xor_ln140_fu_190_p2);

assign p_Result_s_fu_262_p5 = {{shift_reg_V[9:9]}, {tmp_3_fu_252_p4}};

assign select_ln72_fu_320_p3 = ((icmp_ln70_fu_314_p2[0:0] == 1'b1) ? 2'd3 : 2'd0);

assign state_load_load_fu_215_p1 = state;

assign tmp_1_nbreadreq_fu_138_p3 = data_fifo_empty_n;

assign tmp_2_fu_227_p3 = state[32'd1];

assign tmp_3_fu_252_p4 = {{shift_reg_V[9:1]}};

assign trunc_ln708_fu_223_p1 = shift_reg_V[0:0];

assign tx = (xor_ln53_fu_235_p2 | trunc_ln708_fu_223_p1);

assign xor_ln136_fu_197_p2 = (tmp_1_nbreadreq_fu_138_p3 ^ 1'd1);

assign xor_ln140_fu_190_p0 = data_fifo_full_n;

assign xor_ln140_fu_190_p2 = (xor_ln140_fu_190_p0 ^ 1'd1);

assign xor_ln53_fu_235_p2 = (tmp_2_fu_227_p3 ^ 1'd1);

assign xor_ln59_fu_364_p2 = (write_r ^ 1'd1);

assign xor_ln93_fu_394_p2 = (load ^ 1'd1);

endmodule //top
